#+TITLE: PIP Instances
#+AUTHOR:    Gustavo Gutierrez
#+EMAIL:     gustavo.ggutierrez@gmail.com
#+DATE:      2011-10-29 Sat
#+DESCRIPTION:
#+KEYWORDS:
#+LANGUAGE:  en
#+OPTIONS:   H:4 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   skip:nil d:nil pri:nil tags:not-in-toc
#+OPTIONS:   TeX:t LaTeX:t toc:t todo:t
#+LaTeX_CLASS: report
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:
* Basic CUDF file (legacy)
  |-----------------+---------+-----------|
  | Package         | Version | Installed |
  |-----------------+---------+-----------|
  | car             |       1 | true      |
  | bicycle         |       7 |           |
  | gasoline-engine |       1 | true      |
  | gasoline-engine |       2 |           |
  | electric-engine |       1 |           |
  | electric-engine |       2 |           |
  | solar-collector |       1 |           |
  | battery         |       3 | true      |
  | wheel           |       3 |           |
  | wheel           |       2 | true      |
  | door            |       2 | true      |
  | door            |       2 |           |
  | turbo           |       1 | true      |
  | tire            |       1 |           |
  | tire            |       2 |           |
  | window          |       1 |           |
  | window          |       2 |           |
  | window          |       3 |           |
  | glass           |       1 |           |
  | glass           |       2 |           |
  |-----------------+---------+-----------|

  The virtual packages in the problem are:
  |-----------------+-------------------|
  | Package         | Provided by       |
  |-----------------+-------------------|
  | engine          | gasoline-engine,1 |
  |                 | gasoline-engine,2 |
  |                 | electric-engine,1 |
  |                 | electric-engine,2 |
  | huge-battery    | battery,3         |
  | battery         | battery,3         |
  | wheel           |                   |
  | door            |                   |
  | window          |                   |
  | tire            |                   |
  | glass           |                   |
  | turbo           |                   |
  | bycicle         |                   |
  | gasoline-engine |                   |
  | electric-engine |                   |
  | solar-colector  | solar-colector,1  |
  | car             | car,1             |
  |-----------------+-------------------|
 
 
* Instance description
  |--------+----------+--------------+-----------+----------|
  | Name   | Packages | Dependencies | Conflicts | Provides |
  |--------+----------+--------------+-----------+----------|
  | kmines |    71342 |       404070 |     45915 |   116849 |
  |--------+----------+--------------+-----------+----------|
 
* Statistics
** Representation size
   The following data is measured by loading all the relevant
   information of the problem into /ground relations/.

   For these measurements we are using the default parameters to
   initialize CUDD.
   |--------+--------------+---------+-----+-----------+--------------|
   | Name   | Memmory (MB) | GC (s.) |  GC | BDD Nodes | Reading (s.) |
   |--------+--------------+---------+-----+-----------+--------------|
   | kmines |      64.2197 |   9.743 | 243 |   1035915 |      35.2547 |
   |--------+--------------+---------+-----+-----------+--------------|
  
* Solver

** Constraints and branchers
   Three main constraints act on the problem:
   - Dependencies :: : 
		     - Add packages:
		       - On installation inclusions. When a package
                         appears in the installation all its
                         dependencies must be fulfilled.  [[file:../solver/prop/dependencies.hh::75][Implementation]]
		     - Remove packages: A package cannot be installed
                       if at least one of its dependencies is not
                       installable.  [[file:../solver/prop/dependencies.hh::92][Implementation]]

		       
		     This propagator does not computes a /fixed
                     point/. Its own execution can lead to the
                     inclusion of more packages that can lead to more
                     prunning to be done.
		     
   - Provides :: :
		 - Add packages:
		   - When a provided tuple becomes *known*, both
                     packages the provider and the virtual must be
                     part of the installation.  [[file:../solver/prop/provides.hh::69][Implementation]]
		   - When a package is installed, all the packages it
                     provides become installed and known in the
                     provides relation.
		     
		     - This can be done in several ways. The first one
                       is by implementing it as part of the propagator
                       or by creating a /dependency/ between every
                       concrete package and the packages it
                       provides. This make sense since it is not
                       possible to have a package installed without
                       having the functionality it provides. This has
                       the advantage that no extra code is needed and
                       the /dependencies/ constraint will take care of
                       this part.

		     - As a concrete package provides itself, all the
                       concrete packages that are *known* are used to
                       update the provides relation to reflect this
                       fact. This will prevent concrete packages from
                       being selected by the brancher.  [[file:../solver/prop/provides.hh::77][Implementation]]
		   - When there is only one provider for a package
                     that is needed in the installation the provider
                     is installed. [[file:../solver/prop/provides.hh::88][Implementation]]
		 - Remove packages: This constraint neither removes
                   packages from the installation nor tuples from
                   other relations.
   - Conflicts :: :
		  - Add packages: This constraint *does not* add any
                    package from the installantion and does not add
                    any relation to other veriable.
		  - Remove packages: when a package is installed, all
                    the known conflicts of it must become
                    uninstallable. This removes the conflicting
                    packages from the installation.
 
		  This propagator computes a fix point. The reason is
                  that the conflict relation is symetric and not
                  transitive. Therefore, running the prunning algorith
                  will not add further information that will lead to a
                  re-execution of itself.

   - Brancher :: : There are several ways of branching this problem
		 - /Stable providers/. This brancher enforces that
                   /every/ package in the installation is provided by
                   a package in the same installation. For this, the
                   state of the brancher consists of the installation
                   and the provides variables.
		   - Brancher functionality:
		     - The brancher is /done/ when all the packages
		       *knwon* in the installation have at *least one*
		       provider.
		     - When the brancher is *not done*, a subrelation of
		       packages needing a provider is computed and one
		       of the tuples of this relation is taken as a
		       *choice*. This is represented by including it as
		       *known* in the provides relation.

		       This part of the brancher can be improved by an
		       heuristic that makes a *reasonable* choice that
		       could lead to a good solution.
		   - Important remarks: 
		     - The brancher should only select provides tuples
                       that involve virtual packages. It is a mistake
                       if the brancher chooses a provider for a
                       concrete package.
		     - While the brancher is computing whether it is
                       done or not it can store some information that
                       will be used during the /choice/ part. This
                       information is the subrelation of packages that
                       need to be provided and the ways for doing it.



* CUDF parsing
  This section presents a description about how /CUDF/ files are
  parsed and the respective constraints of the problem are
  generated. The whole process starts by parsing the file and filling
  some data structures. The parsing process identifies three different
  types of packages:
  - Concrete packages :: : /CUDFPackage/. Contains the attributes:
       /name/, /rank/ and /versioned_name/. /rank/ is a consecutive
       identifier associated with every package in the universe.
  - Versioned packages :: : /CUDFVersionedPackage/, inherits from
       /CUDFPackage/ and contains the attributes:
    - version :: : the version of the package in the input.
    - depends :: the representation of a /VpkgFormula/ according with
                 the /CUDF/ specification.
    - conflicts :: : a /VpkgList/ with the packages that conflict.
    - provides :: : a /VpkgList/ with the packages that are provided.
    - installed - wasInstalled :: two booleans that indicate the state
         of the package in the input and at the end of the solving
         process.
    - keep :: the information regarding what can be done with the
              package.
    - properties :: extra properties in the package statement.
    - virtual_package :: *to be added*
  - Virtual packages :: : /CUDFVirtualPackage/, inherits from
       /CUDFPackage/ and contains the attributes:
    - all_versions :: : a versioned package set.
    - highest_installed :: : *to be filled*
    - highest_version :: : *to be filled*
    - providers :: a list of providers.
    - versioned_providers :: *to be filled*
    - highest_installed_provider_version :: *to be filled*
 
  The parser defines the following types for the containers used
  during the process.
  - CUDFproblem :: : Is a class that stores the information of the
                   request made by the user. It contains the following
                   attributes:
    - install :: : List of packages to be installed.
    - remove :: : List of packages to be removed.
    - upgrade :: : List of packages for upgrade.
  - CUDFVersionedPackageList :: : an /stl vector/
  - CUDFVersionedPackageSet :: : an /stl set/
  - CUDFProviderList :: an /stl vector/
  - CUDFVersionedProviderList :: an /stl map/ that associates a
       /version/ with a /provider list/.
  - CUDFVirtualPackageList :: an /stl vector/ 
       
  The parser reads a /CUDF/ input and fill in the following data
  structures:
  - the_problem :: : CUDFproblem.
  - all_packages :: : CUDFVersionedPackageList
  - installed_packages :: : CUDFVersionedPackageList
  - uninstalled_packages :: : CUDFVersionedPackageList
  - all_virtual_packages :: : CUDFVirtualPackageList
       
  The function /parse_cudf/ that takes a ponter to a /FILE/ is also
  provided. This function is called and afterwards the data structures
  above are filled.

   

* UNSA solver
  This solver uses linear programming to solve the /Package
  Installability Problem/. It generates the constraints and the
  optimization function from the parsed file. There are several
  predefined criteria that will influence the generated objective
  function. It provides a function call /generate_constraints/ that
  takes care of everything.

  For this solver, the problem is a /minimization/. Every column in
  the linear model represents a package. The bounds for a variable
  (that represents a package) are 0 to 1. Every variable is set to be
  binary.

** Solver state
   The solver provides an easy adaptation of different solver
   implementations. In this section we will describe the interface
   with /lp_solve/.
   
   The state of the solver consists of:
   1. *rank* : an integer, initialized to zero and is reset every time
      a new constraint will be added to the model.
   2. *nb_packages* : stores the number of packages that are involved
      in the model. This attribute is initialized with the number of
      packages in the universe.
   3. *nb_vars* : stores the number of variables. This attribute gets
      initialized with the number of packages plus the *other_vars*
      parameter of the solver initializer method.
   4. *coefficient* : an array of /double/ of size *nb_vars* + 1. This
      attribute represent the coefficient of every variable in the
      objective function. 
   5. *index* :  an array of integers of size *nb_vars* + 1.
** Package constraints
   The dependencies and conflicts of every package are represente as
   constraints in the minimization problem.
*** Dependencies
    The dependencies of a package are represented as a /conjunction/
    of /disjunctions/. For instance, a package $p$ can have the
    following dependencies: $\{r \land s \land (t \lor u)\}$. Meaning
    that for $p$ to be installed, $r$ and $s$ must be installed and
    either $t$ or $u$.
    
    Three constraints are used represent these dependencies in the
    model: 
    \begin{align*}
    &-1p +1r &\geq 0 \\
    &-1p +1s &\geq 0 \\
    &-1p +1t +1u\geq 0\\
    \end{align*}
    Note that the dependency relation relies on the fact that all the
    constraints in the model must be satisfied. When $p$ gets
    installed the only way for the constraints representing the
    dependency is that at least one of the other packages gets
    installed.
*** Conflicts
    Suppose there are two packages $p$ and $q$ that conflict. The way
    to encode this as a constraint in a LP model is: $-1p -1q \geq
    -1$. As $p$ and $q$ are have as possible values either 0 or 1 then
    the constraint has the follow behavior:
    |---+---+------------+--------|
    | p | q | Constraint | Holds? |
    |---+---+------------+--------|
    | 0 | 0 |          0 | Yes    |
    | 1 | 0 |         -1 | Yes    |
    | 0 | 1 |         -1 | Yes    |
    | 1 | 1 |         -2 | No     |
    |---+---+------------+--------|
    where the values for columns $p$ and $q$ denote the existence or
    inexistence of the package in the system.

    
