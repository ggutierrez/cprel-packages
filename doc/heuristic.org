#+TITLE: Heuristic evaluation for the PIP
#+AUTHOR: Gustavo Gutierrez
#+LaTeX_CLASS: article
#+LATEX_HEADER: \usepackage{amsmath}


#+begin_src emacs-lisp :results silent
  ;(setq org-export-latex-listings 'listings)
#+end_src

* The necessity of an heuristic
  Solving the /Package Installability Problem/ (PIP) using a
  constraint based solver requires an heuristic in order to ensure the
  quality of the solutions and the proof of optimality. Several
  heuristics can be used to guide the search, this document describes
  them.

  During the search, the solver will basically take the decision of
  installing a concrete package /p/ that provides a virtual package
  /q/ that is required in the installation. This decision will be
  taken at each level of the search tree until there are no virtual
  packages in the installation that are not provided by other
  packages.

  It is important to consider that the solver is not stopping when the
  installation variable is assigned. This will let the solver to run
  for much time that needed. Instead, the following predicate defines
  the stop condition, based on the set $\text{Inst}_{\text{GLB}}$ of
  installed packages:

  \begin{align*}
  \forall p : p \in \text{Inst}_{GLB} \land
  \text{virtual}(p) \Rightarrow \exists q : (q,p) \in \text{Provides}
  \land q \in \text{Inst}_{GLB}
  \end{align*}

  The performance of the search depends on choosing which package to
  install. This decision can be taken in different different ways and
  based on different kind of information. Here we present some of the
  ones we have considered.

* Articulation points in the Impact Graph
  A graph is an interesting way to see all the relations in the
  problem. With this information we can make further inference and
  take smart decisions during the search. We define this graph as the
  /Impact Graph/ (IG). The graph is undirected, nodes in it represent
  packages of the problem and there is an edge between two nodes if
  there is either a dependency, or a conflict or a provides relation
  between the two in the problem.

  With the information represented by /IG/ we can do some
  inference. For instance, The /connected components/ of /IG/
  represent actual divisions of the problem. This leads to the
  following interesting facts:

  - Let's $C$ represent the set of different components in /IG/. By
    themselves, every element in $C$ represent a different problem
    that can be solved independently.
  - The original problem can be solved by finding the solutions of all
    its components and combining them. The importance of this is that
    it prevents the search space to explode. For instance, consider
    that the problem can be divided into three components
    $\{A,B,C\}$. A solution of the problem can be obtained by
    combining *any* of the solutions of the sub-problems. When the
    solver can independently explore the solutions for each
    sub-problem we avoid finding solutions that can be generated by a
    further processing with less complexity.
  - It plays well with the optimization. Knowing that the problems are
    independent makes it possible to apply optimization
    independently. The best solution of the original problem will be
    the combination of the best solutions of every sub-problem.
  
  
  The problem is then, what will happen when there is only one
  component in the whole problem?. In this case we can force the
  division of the problem by taking decisions during the search. When
  a package gets installed, it disappears from /IG/ as it is no longer
  of interest to the solver (e.g. because it is already provided).

  #+source: another-listing
  #+begin_src python :exports code
   x = str(y)
  #+end_src

, This is an inline snippet of Python: [[latex:python][x = str(y)]].
* An example
  Instead of delegating all the work to the solver we can compute
  solutions to sub-problems and then combine them together. This
  strategy can be used even in the presence of optimization and yet
  let us to combine optimal solutions to get an optimal for a bigger
  problem.

  
